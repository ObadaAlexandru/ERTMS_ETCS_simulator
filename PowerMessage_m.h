//
// Generated file, do not edit! Created by opp_msgc 4.2 from PowerMessage.msg.
//

#ifndef _POWERMESSAGE_M_H_
#define _POWERMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>PowerMessage.msg</tt> by opp_msgc.
 * <pre>
 * message	PowerMessage
 * {
 *     int idServingSrb;
 *     int idMS;
 *     int idSrb[];
 *     double potenze[];
 * }
 * </pre>
 */
class PowerMessage : public ::cMessage
{
  protected:
    int idServingSrb_var;
    int idMS_var;
    int *idSrb_var; // array ptr
    unsigned int idSrb_arraysize;
    double *potenze_var; // array ptr
    unsigned int potenze_arraysize;

  private:
    void copy(const PowerMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PowerMessage&);

  public:
    PowerMessage(const char *name=NULL, int kind=0);
    PowerMessage(const PowerMessage& other);
    virtual ~PowerMessage();
    PowerMessage& operator=(const PowerMessage& other);
    virtual PowerMessage *dup() const {return new PowerMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getIdServingSrb() const;
    virtual void setIdServingSrb(int idServingSrb);
    virtual int getIdMS() const;
    virtual void setIdMS(int idMS);
    virtual void setIdSrbArraySize(unsigned int size);
    virtual unsigned int getIdSrbArraySize() const;
    virtual int getIdSrb(unsigned int k) const;
    virtual void setIdSrb(unsigned int k, int idSrb);
    virtual void setPotenzeArraySize(unsigned int size);
    virtual unsigned int getPotenzeArraySize() const;
    virtual double getPotenze(unsigned int k) const;
    virtual void setPotenze(unsigned int k, double potenze);
};

inline void doPacking(cCommBuffer *b, PowerMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PowerMessage& obj) {obj.parsimUnpack(b);}


#endif // _POWERMESSAGE_M_H_
